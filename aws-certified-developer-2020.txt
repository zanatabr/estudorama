===================================================
== AWS Certified Developer 2020 - Exam (DVA-C01) ==
===================================================


-- Custo para o treino
proximadamente US$10

-- Criação de conta
https://aws.amazon.com/

-- AWS Free Tier 
-- Ver quais itens são free (no plano anual ou para sempre)
https://aws.amazon.com/free

-- Comparação dos planos
https://aws.amazon.com/premiumsupport/plans/



-- Configurar Alerta de Custo - Budget
1. Buscar por "Billing" (Billing & Cost Management Dashboard)
2. Create and Manage Your Budgets. 
3. Cost budget


Cost budget

Monitor your costs against a specified amount and receive alerts when your user-defined thresholds are met.
Budget details

Name
ZanataBr - Máximo Custo Mensal AWS
Period
Monthly
Start Date
May 1, 2020
End Date
-
Budgeted amount
$10
Advanced Options

Aggregate costs by: Unblended costs

Include costs related to: Taxes, Support charges, Other subscription costs, Recurring reservation charges, Upfront reservation fees, Discounts

Exclude costs related to: Credits, Refunds
Alerts

Alert 1

Actual CostsGreater than 75% ($7.5)2 contacts



= Seção 2: Fundamentos AWS: IAM e EC2 =

== 8. Regions e Availability Zones ==

1. REGION: US-EAST-1 / sa-east-1
1.1 AVAILABILITY ZONE: US-EAST-1B / sa-east-1c
1.2 AVAILABILITY ZONE: US-EAST-1A / sa-east-1a
1.3 AVAILABILITY ZONE: US-EAST-1C


- AWS tem Regions em várias cidades ao redor do mundo. Ex. us-east-1
- Cada Region tem Availability Zones. Ex us-east-1a, us-east-1b, us-east1c.
- Cada Availability Zone é um data center isolado fisicamente dos outros data centers. O motivo é evitar que um desastre afete mais de uma Avalilability Zone
- Os Serviços AWS são separados por Regions com exceção de IAM e S3



== 9. Introdução IAM ==

1. IAM (Identity and Access management) = Identidade e Gerenciamento de acesso
2. uito importante para segurança na plataforma AWS
2.1. Users (usuário)
2.2. Groups (grupos)
2.3. Roles (atribuição)
3. A Root Account "NUNCA" deve ser usada ou compartilhada
4. Aos usuários deve ser dada mínima permissão para executar tarefas requeridas
5. Policy (regras) são escritas em JSON (Javascript Object Notation)


6. Policies :: Define o que é permitido e o que não é permitido para as entidades abaixo:
6.1. USERS :: Normalmente atribuído a uma pessoa
6.2. GROUPS :: Normalmente atribuído a times ou função (Ex: Desenvolvedores Engenheiros)
6.3. ROLES :: Atribuído a recursos AWS (Ex: EC2, o que o EC2 poderá acessar)


7. IAM é um serviço global (não se escolhe região, serve para todas)
8. Permissão é definida pela Policy escrita em JSON
9. MFA (Multi Factor Authentication) pode ser configurado
10. IAM tem Policies pré definidas (managed policies)
11. Veremos IAM policies em detalhes mais pra frente
12. Devemos dar aos usuários a mínima permissão que eles precisam para executarem suas tarefas.


13. IAM FEDERATION
13.1. Grandes empresas normalmente integram seu repositório de usuários com IAM (usar recursos de autenticação já existentes na empresa e usar na AWS)
13.2. Dessa forma os usuários podem acessar AWS usando a credenciais da empresa
13.3. Identity Federation usa o padrão SAM (active directory)


14. IAM - NÃO ESQUECER !!!
14.1. Apenas 1 user IAM por pessoa
14.2. Apenas 1 role por aplicação
14.3. Credenciais IAM nunca devem ser compartilhadas
14.4. Nunca coloque suas credenciais no código da sua aplicação
14.5. NUNCA use a conta ROOT, exceto para a configuração inicial
14.6. NUNCA use credenciais da conta ROOT





== 10. IAM - LAB 1 - PARTE 1 ==

Em "Services", buscar por "IAM"



1. Delete your root access keys (Habilitado por padrão)
Delete your AWS root account access keys, because they provide unrestricted access to your AWS resources. Instead, use IAM user access keys or temporary security credentials. 


2. Activate MFA on your root account (HABILITAR)
Activate multi-factor authentication (MFA) on your AWS root account to add another layer of protection to help keep your account secure.

2.1. Multi-factor authentication (MFA)
2.2. Activate MFA
2.3. Usaremos o "Virtual MFA device"
2.4. No dispositivo, usaremos o "Google Authenticator" (Há outros)
2.5. Scanear o QR Code
2.6. Informar o primeiro código, aguardar para informar o próximo, e finalizar.


3. Create individual IAM users
Create IAM users and give them only the permissions they need. Do not use your AWS root account for day-to-day interaction with AWS, because the root account provides unrestricted access to your AWS resources.

3.1. Manage Users
3.2. Add user 

     User details
       - User name: aulaaws
       - AWS access type: Programmatic access and AWS Management Console access
       - Console password type: Custom
       - Require password reset: No
       - Permissions boundary: Permissions boundary is not set
       
     Permissions summary
       - Type: Group
       - Name: Administradores
     
     Tags
       - No tags were added.



4. Use groups to assign permissions
Use IAM groups to assign permissions to your IAM users to simplify managing and auditing permissions in your account.


4.1. Manage Groups 
     - name : Administradores
     - Policy Name: AdministratorAccess


5. Apply an IAM password policy
Use a password policy to require your IAM users to create strong passwords and to rotate their passwords regularly.

5.1. Manage Password Policy 
5.2. Set password policy
     - Enforce minimum password length: 8 characters
     - Allow users to change their own password
     - (Há outras opções)



== 11. IAM - LAB 1 - PARTE 2 ==


No topo do Dashboard (https://console.aws.amazon.com/iam/) temos o link para login dos usuários:

IAM users sign-in link:
https://928435948748.signin.aws.amazon.com/console

É possível personalizar esse link, criando um alias para o número da conta, clicando em "customize". Exemplo:

https://zanatabr.signin.aws.amazon.com/console


Fazer o logoff da conta principal e acessar o link anterior para que seja feito um novo login com a conta criada (aulaaws).

Feito o login, configuraremos o MFA (Multi-Factor Authentication) para esse usuário.

1. Em "Services", buscar por "IAM".
2. Acessar "Users"
3. Acessar os detalhes da conta "aulaaws"
4. Em "Security credentials
4.1. Verificar "Assigned MFA device"
4.2. Clicar "Manage"
4.3. Selecionar "Virtual MFA device"
4.4. No "smartphone", app "Google Authentication", adicionar nova conta
4.5. Scanear o QR Code e fornecer os dois códigos MFA




== 12. Introdução EC2 - Parte 1, 2 e 3 ==

1.1. Elastic Compute Cloud
1.2. Um dos mais populares serviços AWS
1.3. Funcionalidades EC2:
1.3.1. Aluguel de Máquina Virtual ou Virtual Machine (EC2)
1.3.2. Armazenamento de dados em discos virtuais (EBS)
1.3.3. Distribuição de tráfego entre as Máquinas virtuais (ELB)
1.3.4. Auto Escalonamento using auto-scaling group (ASG)
1.4. Entender EC2 é fundamental para entender como as nuvens funcionam (ver diagrama ***)

2. Prática: Criar uma Instancia EC2 rodando Linux
2.1. Criar servidor virtual usando o console AWS
2.2. Principais parâmetros de configuração EC2
2.3. Iniciar, parar e terminar nossa máquina virtual


3.1. Em serviços, buscar por EC2
3.2. Selecionar uma região adequada (neste caso America do Sul/São Paulo)
3.3. Em "Create Instance", disparar "Launch Instance"

3.4. Step 1: Choose AMI - Selecionar o AMI (Amazon Machine Image)
3.4.1. Há várias opções "Free Tier elegible"
3.4.2. Selecionar "Amazon Linux 2 AMI"

3.5. Step 2: Choose an Instance Type
3.5.1. No momento, usar a "t2.micro" (free tier).

3.6. Step 3: Configure Instance Details
3.6.1. Number of Instances: 1
3.6.2. Purchase options: Deixar desmarcado "Request Spot instances" (leilão)
3.6.3. Network: Manter o "vpc" informado.
3.6.4. Subnet: Manter o padrão "No preference".
3.6.5. Auto-assign Public IP: Enabled
3.6.6. Shutdown behavior: Stop
3.6.7. O restante deixar padrão, será visto posteriormente

3.7. Step 4: Add Storage
3.7.1. Volume Type: Root (padrão)
3.7.2. Device: /dev/xvda (padrão)
3.7.3. Size (GiB): 8 (padrão)
3.7.4. General Purpose SSD (gp2) (padrão) - Poderia ser Magnético ou Provisioned IOPS SSD
3.7.5. Delete on Termination: Habilitado (padrão) -> Quando a instância terminar (for descartada), remover também o volume
3.7.6. Encrypted: Not encrypted (padrão)
3.7.7. Há a possibilidade de adicionar outros volumes

3.8. Step 5: Add Tags (Útil para monitoração ou administração de custos)
3.8.1. Key: Name
3.8.2. Value: Primeira Instancia EC2
3.8.3. Instances: Marcado
3.8.4. Volumes: Marcado

3.9. Step 6: Configure Security Group
3.9.1. Assign a secutity group: Create a NEW security group
3.9.2. Security group name: somente-ssh
3.9.3. Description: Acesso somente via SSH
3.9.4. Type: SSH
3.9.5. Protocolo: TCP
3.9.6. port Range: 22
3.9.7. Source: Anywhere 0.0.0.0/0, ::/0 (qualquer IP V4 ou IPV6)
3.9.8. Description: Acesso SSH de qualquer IP

3.10. Step 7: Review Instance Launch
3.10.1. Após revisão: "Launch"
3.10.2. Informar o par de chaves (pública e privada) que será usado para acessar a máquina/instância. Não há como acessar via "usuário e senha".
3.10.3. Create a new Key pair
3.10.4. Key pair name: ec2keypair
3.10.5. Fazer o download
3.10.6. Launch Instance



== 15. Usar SSH para acessar EC2 - Linux / Mac ==

1. Buscar pela instância no painel de instâncias do EC2
2. Marcar a linha referente à instância e clicar em "connect"
3. Serão apresentadas as opções de "métodos de conexão", com informações do que deve ser feito (semelhante ao que segue):

    To access your instance:
        Open an SSH client. (find out how to connect using PuTTY)
        Locate your private key file (ec2keypair.pem). The wizard
        automatically detects the key you used to launch the instance.
        Your key must not be publicly viewable for SSH to work. 
        Use this command if needed:
    
        chmod 400 ec2keypair.pem
    
        Connect to your instance using its Public DNS:
    
        ec2-18-230-196-77.sa-east-1.compute.amazonaws.com
    
    Example:
    
    ssh -i "ec2keypair.pem" ec2-user@ec2-18-230-196-77.sa-east-1.compute.amazonaws.com
    
    Please note that in most cases the username above will be correct, 
    however please ensure that you read your AMI usage instructions to 
    ensure that the AMI owner has not changed the default AMI username.
    	
4. Proteger o arquivo da chave para apenas leitura do owner:
4.1.  $ chmod 400 ec2keypair.pem

5. Efetuar a conexão usando a chave




== 16. Usar SSH para acessar EC2 - Microsoft Windows ==

Idem: Usando o aplicativo Putty (ou qualquer outro semelhante)
Converter a chave ".pem" para o formato ".ppk" com o puttyGen (Putty Key Generator)





== 17. Introdução - Security Groups ==

|        ------>                  ------>
|  (WWW)         [Security Group]         (Máquina EC2)
|        <------                  <------


1. Security group é o fundamento básico para segurança no AWS
2. Security group determina o que é permitido entrar ou sair da maquina virtual EC2
3. É o fundamento mais importante para solucionar problemas de rede no ambiente AWS 
3.1. Sempre que ocorrer algum problema de acesso à instância, o primeiro ponto a ser verificado é o Security Group. Eliminada a possibilidade de o problema ter sido causado pelo SG, seguir para os demais diagnósticos.
4. Verificar como usar o security groups para permitir tráfego entrando e saindo do EC2

4.1. Fazer um teste de conexão via SSH 

    $ ssh -i "ec2keypair.pem" ec2-user@ec2-18-230-196-77.sa-east-1.compute.amazonaws.com

4.2. Inicialmente com sucesso. Dar um "exit" nessa sessão.

4.3. No painel da AWS, EC2, Instances; procurar pela instância. Na aba de Descrição da instância, buscar por "Security groups". No nosso caso teremos apenas o "somente-ssh".

4.4. Editar o SG "somente-ssh", e remover as duas "Inbound rules" existentes.

4.5. Fazer um novo teste de conexão via SSH 

    $ ssh -i "ec2keypair.pem" ec2-user@ec2-18-230-196-77.sa-east-1.compute.amazonaws.com

4.6. A conexão será recusada.

    ssh: connect to host ec2-18-230-196-77.sa-east-1.compute.amazonaws.com port 22: Connection timed out

4.7. Reconfigurar as "Inbound rules" do Security Group "somente-ssh"

4.7.1. Type: SSH
4.7.2. Protocolo: TCP
4.7.3. port Range: 22
4.7.4. Source: Anywhere 0.0.0.0/0, ::/0 (qualquer IP V4 ou IPV6)
4.7.5. Description: Acesso SSH de qualquer IP

4.8. Fazer um novo teste de conexão via SSH, que deverá resultar em sucesso.

    $ ssh -i "ec2keypair.pem" ec2-user@ec2-18-230-196-77.sa-east-1.compute.amazonaws.com



== 18. Security Group - continuação ==

1. Security Groups funcionam como um firewall para instancias EC2.
2. Security Groups controlam:
2.1. Acesso a portas
2.2. Endereços IP permitidos (ipv4 e ipv6)
2.3. Controla entrada de dados para a instancia EC2
2.4. Controla saída de dados da instancia EC2

|
|   |                |          |  SG1 INBOUND   |
|   |  Máquina EC2   |  <------ |  Filtra IP e   |
|   |                |          |Porta com Regras|
|          |                      ^           ^
|          |           (permitido)|           |(Negado)
|          V                      |           |
|
|   | SG1 OUTBOUND   |    |    Seu PC     |  |  Outros PCs   |
|   |  Filtra IP e   |    |  IP x.x.x.x   |  |  IP y.y.y.y   |
|   |Porta com Regras|    |Permite Port 22|  |Permite Port 22|
|          |
|          |(permitido)
|          V
|
|   |      WWW       |
|   |  Qualquer IP   |
|   | Qualquer Porta |



3. Pode ser associado a múltiplas instâncias.
3.1. Ou seja, um único SG pode ser usado em várias instâncias.
3.2. O contrário tamvém vale: Uma instância pode ser associada a vários SGs.
4. Escopo: VPC
5. Fica fora da instancia EC2. Tráfego é bloqueado antes de chegar na instância EC2
6. Boa prática ter um security group só para acesso SSH 
6.1. Um SG SSH para acessar a instância via terminal, e outross SGs para as demais fnalidades)
7. Se você não consegue acessar EC2 (time out) o problema é provavelmente o Segurity Group
8. Se o erro for Connection Refused, o problema NÃO é o security group. 
8.1. A conexão chegou até a instância EC2, mas a "instância" está recusando a conexão (já passou pelo SG).
9. Todo tráfego de ENTRADA é bloqueado por padrão
10. Todo tráfego de SAÍDA é permitido por padrão


11. Security Groups - referenciando outro security group

É possível associar o SG associadas a outras instâncias para permitir o acesso a ela. 

Exemplo:

(Instância EC2 - A) : Associada ao SG1

(Instância EC2 - B) : Associada ao SG2

(Instância EC2 - C) : Associada ao SG3


(Instância EC2 - Alvo) : 
- Foi associada a outro SG, em que as regras de InBound
  permitem acesso ao SG1 e ao SG2

As instâncias "A" e "B" conseguem acessar a Instância Alvo.
A instância "C" não tem permissão para acessar a Instância Alvo.




== 19. IP Público, IP Privado e Elastic IP ==


1. Endereço IP pode ser IPv4 ou IPv6
2. Exemplo de IPv4: 68.250.23.26
3. Exemplo de IPv6: 2001:0db8:85a3:0000:0000:8a2e:0370:7334
4. Utilizaremos apenas o IPv4 (formato cobrado na prova)
5. IPv4 é o formato mais utilizado na Internet
6. IPv6 é o mais novo formato e resolve o problema IoT (Internet of Things)
7. IPv4 tem mais de 3.7 bilhões de endereços públicos

8. Formato IPv4: [0-255].[0-255].[0-255].[0-255]

9. Private IPv4: 
9.1. 10.0.0.0/8 [ 10.0.0.0 - 10.255.255.255 ]
9.2. 172.16.0.0/12 [ 172.16.0.0 - 172.31.255.255 ]
9.3. 192.168.0.0/16 [ 192.168.0.0 - 192.168.255.255 ]


Exemplo: IP Público e Privado


|
|  |  Empresa A   |  Internet
|  | Rede Privada |  Gateway                        | WebServer |
|  |192.168.1.0/24|  68.234.1.65   |          |-----|65.13.45.98|
|                    (público)     |          |     
|                    --------------|          |
|                                  | Internet |
|                                  |          |
|                                  |          |
|  |  Empresa B   |  --------------|          |----| Webserver  |
|  | Rede Privada | Internet       |          |    |53.12.34.234|
|  | 10.10.0.0/16 | Gateway
|                   70.132.34.83
|                   (público)


-- Diferenças entre IP Público e Privado --

10. IP Público
10.1. Significa que o endereço é identificado na internet
10.2. Endereço único em toda Internet
10.3. Pode ser facilmente geo-localizado

11. IP Privado
11.1. Significa que o endereço só é válido na rede interna (casa ou escritório)
11.2. Endereço único na rede interna, mas duas empresas podem usar o mesmo endereço privado
11.3. Computadores acessam a Internet usando Internet Gateway (Ex.: Roteador)
11.4. Somente um faixa de endereços podem ser usados como privado


12. Elastic IP 

12.1. Quando nós paramos uma Instância EC2, o endereço IP público pode mudar
12.2 Se quisermos um endereço IP público fixo, precisamos de um Elastic IP
12.3. Elastic IP é um endereço IPv4 público que você tem até que você delete
12.4. Podemos anexar um Elastic IP a somente uma instancia EC2 de cada vez
12.5. Podemos apontar o Elastic IP para outra instancia EC2 rapidamente
12.6. Podemos ter até 5 Elastic IP em uma conta AWS. Podemos solicitar mais Elastic IP usando AWS ticket.
12.7. Tente não usar Elastic IP em produção (somente em desenvolvimento)
12.8. O uso de Elastic IP demonstra uma arquitetura de baixa qualidade
12.9. Use IP aleatório e registre um DNS
12.10. Ou como veremos mais pra frente. Use Load Balancing. IP público não será necessário.



13. IP público x IP privado (IPv4) - AWS EC2 - Prática

13.1. Por padrão, instâncias EC2 são criadas com:
13.1.1. IP privado para rede AWS interna
13.1.2. IP público, para rede web (Internet)

13.2. Quando conectamos a EC2 usando SSH:
13.2.1. Não podemos usar o IP privado, pois não estamos na mesma rede
13.2.2. Temos que usar o IP público

13.3. Se você parar sua instância EC2, seu IP público pode mudar




== 20. IP Público, IP Privado e Elastic IP - LAB 1 ==

1. Através da interface de administração de instâncias, acessar a instância criada
1.1. Verificar que a instância possui um IP Público e um IP Privado
2. Interromper a instância (Stop)
2.1. Perceber não temos mais o IP Público da instância, mas o IP Privado continua o mesmo
3. Iniciar a intância novamente
3.1. Perceber que a instância recebeu um novo IP Público (diferente do anterior), mas o IP Privado continua o mesmo.

-- Elastic IP --

Se não quisermos que o IP Público seja modificado a cada reinício da instância, será necessário associar um IP Fixo, e isso é feito através do Elastic IP.

1. Acessar a opção de administração "Elastic IPs"
2. Solicitar a alocação de um IP (Allocate Elastic IP Address)
3. Associar o endereço à instância EC2 que criamos
4. Retornar para a administração da instância EC2 e verificar se o novo IP foi associado à instância como IP Público
5. Interromper a instância (Stop)
5.1. Perceber que o IP Público da instância se manteve (Elastic IP)
6. Iniciar a intância novamente
7. Fazer um teste de acesso via SSH
7.1. Ex.: $ ssh -i "ec2keypair.pem" ec2-user@18.230.34.236
7.2. OK
8. Remover a associação do Elastic IP com a instância EC2
8.1. Disassociate Elastic IP Address
9. Solicitar a "Desalocação" do Endereço IP solicitado
9.1. Release Elastic IP Address
10. Perceber que a instância EC2 recebeu um novo IP Público (dinâmico e que não pertence ao pool do Elastic IP)






== 21. Instalar Apache na EC2 ==

-- Instalar e iniciar servidor Apache na EC2 --

a. Usar a instancia EC2 criada
b. Instalar o servidor Apache para exibir uma webpage
c. Criar um index.html para mostrar o hostname da máquina

1. Acessar a instância vis SSH
1.1. $ ssh -i "ec2keypair.pem" ec2-user@52.67.15.17
2. Na instância
2.1. Atualizar instância:
2.1.1. $ sudo yum update -y
2.2. Instalar o Apache
2.2.1. $ sudo yum install -y httpd.x86_64
2.3. Iniciar o servidor Apache
2.3.1. $ sudo systemctl start httpd.service
2.3.1. $ sudo systemctl enable httpd.service
2.4. Teste local (linha de comando)
2.4.1. $ curl localhost
2.5. Teste via navegador
2.5.1.  http://52.67.15.17
2.5.2.  Falhou. Não acessou a página
2.5.3.  Verificar Security Group da instância.
2.6. No Security Group associado à instância, adicionar um Inbound Rule, associando também o tipo HTTP (Port 80) para qualquer endereço.
2.7. Teste via navegador
2.7.1.  http://52.67.15.17
2.7.2.  OK. Acessou a página
2.8. Adicionar novo arquivo index.html em /var/www/html/ da instância (conteúdo qualquer).
2.9. Teste via navegador
2.9.1.  http://52.67.15.17
2.9.2.  OK. Acessou a nova página
2.10. Modificar arquivo index.html para apresentar hostname
2.10.1. $ echo "Servidor Web - $(hostname -f)" > /var/www/html/index.html
2.11. Teste via navegador
2.11.1.  http://52.67.15.17
2.11.2.  OK. Acessou a nova página




== 22. EC2 - USER DATA ==

Usado para executar alguns comandos na primeira inicialização de uma instância EC2 (atualizações, instalação de alguns aplicativos, etc).

1. Podemos executar comandos automaticamente quando uma instância EC2 é criada usando EC2 User Data
2. Esse script é executado somente uma vez quando a instância e iniciada pela primeira vez
3. EC2 User Data é usado para automatizar o processo de boot tal como:
3.1. Instalar atualizações
3.2. Instalar aplicações
3.3. Baixar arquivos da Internet
3.4. Ou qualquer coisa que você quiser
4. EC2 User Data é executada como usuário root
4.1. Não é necessário usar "sudo"



-- EC2 - User Data - Prática --

a. Vamos fazer com que nossa instância EC2 tenha o Apache instalado para mostrar uma simples web page
b. Para isso nós vamos escrever um User Data Script
c. O script vai ser executado na primeira vez que a instância EC2 for inicializada


1. "Terminar" a instância EC2 anteriormente criada
1.1. Ação "Terminate"
2. Criar uma nova instância EC2, nos mesmos padrões da anterior

3. A diferença é que neste caso faremos a inserção do script em "User data", conforme o que segue:

#!/bin/bash
yum update -y
yum install -y httpd.x86_64
systemctl start httpd.service
systemctl enable httpd.service
echo "Servidor Web - $(hostname -f)" > /var/www/html/index.html

4. Não esquecer de associar o mesmo Security Group que já havíamos criado anteriormente

5. Associar também a chave de segurança que já havíamos criado.


6. Teste via navegador (IP Público da instância)
6.1.  http://54.233.218.109
6.2.  OK. 





== 23. EC2 - Modos de Lançamento ==

-- EC2 - Tipos de Instâncias --

1. On Demand: Processos de curto prazo, paga somente pelo que usa
2. Reserved: Processos de longo prazo (um ano ou mais)
2.1. Mínimo de 1 ano
2.2. Quando reservado, obtém-se um desconto significativo
3. Convertible Reserved: Processo de longo prazo com flexibilidade de tipos
3.1. É possível alterar, por exemplo, o número de processadores
4. Scheduled Reserved: Para processos com janela determinada
4.1. Tem um desconto
4.2. Quando se sabe o período exato de utilização da máquina
4.3. Exemplo: Testes, homologação, etc.
5. Spot: Processos curtos, mais barato, pode ser terminada a qualquer momento (pela AWS)
5.1. Funciona como um leilão. Se alguém oferecer mais, a AWS informa o ocorrido e a instância será interrompida em um curto espaço de tempo.
5.2. Não é adequado para missão crítica
5.3. Talvez para algum laboratório.
6. Dedicated: Nenhum outro cliente vai compartilhar seu equipamento
7. Dedicated Hosts: reserva o equipamento inteiro, com controle de Placement (pode-se controlar onde serão colocadas as instâncias)


-- EC2 - On Demand --

1. Pague somente pelo que usar (cobrado por segundo, depois do primeiro minuto)
2. Tem o maior custo mas não é necessário pré-pagamento
3. Sem contrato. Pode terminar a instância a qualquer momento
4. Recomendado para aplicações de curto prazo e desenvolvimento


-- EC2 - Reserved --

1. Até 75% de desconto comparado com On Demand
2. Pagamento adiantado
3. Período de reserva: 1 ou 3 anos
4. Reserva específica para determinado tipo de instância
4.1. Ex.: T2 micro, 1GB RAM, 1 CPU...
5. Recomendado para aplicações estáveis (ex: database)
6. Convertible Reserved
6.1. Pode-se mudar o tipo de instância EC2
6.2. Até 54% de desconto
7. Schedule Reserved
7.1. Funciona na janela de tempo determinada


-- EC2 - Spot --

1. Desconto de até 90% comparado com On-Demand
2. Funciona tipo leilão. Você usa a sua instância até alguém pagar mais por ela.
3. Preço varia de acordo com oferta e demanda
4. Você recebe uma notificação de que alguém vai pagar mais pela instância e em 2 minutos sua instância será terminada
5. Usada para batch jobs, Big Data analysis ou processos que aceitam interrupções
6. Não deve ser usado para trabalhos críticos ou banco de dados


-- EC2 - Dedicated Hosts --

1. Equipamento dedicado para usar suas instancias EC2
2. Total controle de onde colocar suas instâncias
3. Acesso ao detalhes físico do equipamento
4. Reservado por período de 3 anos
5. Mais caro
6. Usado para software que tem modelos de licensa complexos
7. Ou empresas que tem regras rígidas sobre onde instalar seus servidores


-- EC2 - Dedicated --

1. Instâncias rodam em equipamento dedicado
2. Pode compartilhar instâncias com outras que pertencem a mesma conta
3. Sem controle sobre Placement (pode mover para outro hardware se for dado o comando Stop / Start



-- EC2 - Dedicated Instances vs Dedicate Hosts --


Característica                    | Dedicated | Dedicated Hosts |
* Uso de equipamento dedicado     |     X     |         X       | 
* Cobrado por instância           |     X     |                 | 
* Cobrado por Hosting             |           |         X       |
* Visibilidade de sockets, cores, |           |         X       |  
  host ID                         |           |                 |
* Afinidade entre host e instância|           |         X       | 
* Escolha do hardware onde lançar |           |         X       | 
  a instância                     |           |                 |
* Escolha de Placement automática |     X     |         X       | 
* Adicionar capacidade usando     |           |         X       | 
  Allocation Request              |           |                 |



-- EC2 - Qual tipo é o melhor? --

1. On Demand: Pode-se criar e terminar a qualquer momento e só é cobrado pelo tempo utilizado. Não tem desconto no preço.
2. Reserved: Bom desconto se for feito um bom planejamento a longo prazo
3. Spot: Leilão. Você pode usar sua instância até alguém pagar mais pelos recursos. Instância pode ser terminada a qualquer momento pela AWS
4. Dedicated Hosts: Reserva do equipamento inteiro.

Ou seja: Depende da necessidade.





== 24. EC2 - Detalhes ==


-- EC2 - Preço --

1. Preço de Instâncias (por hora) varia de acordo com os seguintes parametros:
1.1. Region
1.2. Tipo de Instância
1.3. On-Demand vs Spot vs Reserved vs Dedicated Host
1.4. Linux vs Windows vs Private OS (RHEL, WINDOWS SQL)
2. Cobrado por segundo, mínimo de 60 segundos
3. Cobrado também por armazenamento, transferência de dados, Endereço IP fixo, load balancing
4. Não é cobrado quando a instância está parada (Stop)
4.1. Deixa de ser cobrado o uso da instância EC2, mas os demais itens continuam sendo cobrados (armazenamento, Elastic IP, etc)



-- EC2 - Preço - Exemplo --

1. T2.small em sa-east-1 (São Paulo), custa $0.0372 por hora
2. 10 segundos custa $0.0372/60 = 0.00062 (mínimo de 60 segundos)
3. 60 segundos custa $0.0372/60 = 0.00062 (mínimo de 60 segundos)
4. 30 minutos custa $0.0372*30/60 = $0.0186
5. 1 mês custa $0.0372*24*30 = $26.784 (mês de 30 dias)
6. Y segundos (Y > 60) custa $0.0372 * Y / 3600
7. Para lista de preço atualizada, visite o link:
7.1. https://aws.amazon.com/ec2/pricing/on-demand/


-- O que é AMI (AMAZON MACHINE IMAGE) --

1. AWS tem imagens básicas como:
1.1. Ubuntu
1.2. Fedora
1.3. RedHat
1.4. Windows
1.5. Amazon Linux 2 ...
2. Essas imagens podem ser personalizadas usando EC2 User Data
3. É possível criar sua própria imagem
4. AMI é a imagem utilizada para criar instâncias EC2
5. AMI pode ser montada para Linux ou Windows


-- Vantagens de utilizar AMI personalizado --

1. Por que usar AMI personalizado?
1.1. Instalação de pacotes necessários
1.2. Boot mais rápido
1.3. Máquinas configuradas com monitoramento
1.4. Segurança
1.5. Controle de manutenção e updates
1.6. Integração com Active Directory
1.7. Instalação de aplicação, para distribuição quando utilizado com auto-scaling
1.8. Usar AMI de outra pessoa otimizada para Banco de dados ou apps
1.9. AMI é montada para uma REGIÃO



-- Visão Geral - Instâncias --

1. Instâncias tem 5 características:
1.1. CPU (tipo, fabricante, frequencia, número de núcleo, geração)
1.2. RAM (tipo, quantidade, geração
1.3. I/O (performance do disco, Otimização EBS)
1.4. Rede (Bandwidth e latencia)
2. AWS oferece mais de 50 tipos de instâncias: 
2.1. Vide: https://aws.amazon.com/ec2/instance-types/
3. Representadas por letras: R/C/P/G/H/I/F/CR 
3.1. R: especializado em RAM (se a aplicação depende de muita RAM)
3.2. C: depende de muita CPU, muito processamento
3.3. I/O, Rede, GPU...
4. M é balanceado
4.1. Aplicações gerais
5. T2/T3 para burstable (Nitro)
5.1. Pode ser adaptável em momentos de pico
5.2. Se acabar o crédito, o "overclock" desaparece...




-- Instancias Brustable (T2) --

1. AWS trabalha com o conceito de Burstable.
1.1. CPU tem desempenho normal
1.2. Quando a instância precisa de mais processamento, ela pode fazer um Brust da sua capacidade para atender a demanda de processamento, quando isso acontece créditos brust começam a ser utilizados
1.3. Quando os créritos acabam, o CPU tem um desempenho muito ruim
1.4. Quando a carga de processamento volta ao normal, a instância começa a acumular créditos novamente
2. Instancias Brustable são ótimas para tratar cargas inesperadas
3. Se a instância fica muito tempo sem créditos, é hora de mover para uma instância com mais poder de processamento

Vide tabela em: https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/burstable-credits-baseline-concepts.html


-- T2 unlimited --

1. É possível ter créditos brust ilimitados
2. É cobrado extra se você utilizar todos os créditos porém sua instancia não perde performance
3. TENHA CUIDADO. Pode custar caro se você não monitorar a utilização da CPU


-- EC2 - RESUMO --

1. Saber como usar SSH e mudar a permissão do arquivo .pem
2. Saber como usar Security Groups
3. Saber a diferença entre endereço IP público, privado e Elastic IP
4. Saber usar User Data para Personalizar sua instância
5. Saber que você pode criar AMI personalizada
6. Instâncias EC2 são cobradas por segundo e podem ser criadas e deletada com alguns cliques



= Seção 3: Fundamentos AWS: ELB, ASG e EBS =
= Seção 4: Fundamentos AWS: Route 53, RDS, ElastiCache e VPC =
= Seção 5: Fundamentos AWS: Amazon S3 =
= Seção 6: AWS CLI, SDK, IAM Role e Policies =
= Seção 7: AWS Elastic Beanstalk =
= Seção 8: Ferramentas do Desenvolvedor =
= Seção 9: AWS CloudFormation =
= Seção 10: Monitoring and Audit =
= Seção 11: AWS Integração e Messaging =
= Seção 12: AWS Serverless Lambda =
= Seção 13: AWS Serverless DynamoDB =
= Seção 14: AWS Serverless API Gateway, SAM e Cognito =
= Seção 15: ECS - ELASTIC CONTAINER SERVICE =
= Seção 16: Segurança na AWS =
= Seção 17: AWS - Outros Serviços =
= Seção 18: Limpando o Ambiente AWS =
= Seção 19: Prática para o exame =
= Seção 20: Perguntas dos estudantes respondidas em videos =
