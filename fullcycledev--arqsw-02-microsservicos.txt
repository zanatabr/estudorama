== Full Cycle Development ==

--> http://portal.code.education 

Arquitetura de Software



= [ Microsserviços ] =

== 1. Introdução aos Microserviços ==

1. O que é um serviço?
1.1. Disponibiliza informação
1.2. Realiza transações
1.3. Resolve problemas de negócio
1.4. Independente de tecnologia ou produto
1.5. Pode estabelecer a comunicação com diversos "clientes" (sistemas, pessoas, etc que se conectam a esse serviço)





2. SOA :: Arquitetura Orientada a Serviços


|
|      |Sistema|    |Usuários|
|          ^             ^
|          |             |
|          V             V
|   |Enterprise Service Bus - ESB|
|       ^         ^          ^
|       |         |          |
|       V         V          V
|   |Serviço|  |Serviço|  |Serviço|  
|       ^         ^          ^
|       |         |          |
|       V         V          V
|      ---------------------------- 
|      |DB|   |FS|  |Queue|   |etc|
|

Integra diversos serviços através de um ESB


2.1. Serviços normalmente maiores baseados em funcionalidades
2.2. Necessidade de ESB
2.3. Single point of failure (considerado a maior falha desse modelo)
2.4. Compartilhamento de banco de dados é comum
2.5. É comum ter sistemas monolíticos sendo utilizados como serviços.




3. Arquitetura baseada em Microserviços

3.1. Serviços pequenos com poucas responsabilidades
3.2. Maior tolerância a falhas (se um serviço cai, não é todo o sistema cai)
3.3. Totalmente independentes (foi criado para resolver um problema, tem seu próprio BD, sua infra, autenticação, etc. É independente no processo de deploy, BD, etc)
3.4. Cada serviço possui seu próprio banco de dados
3.5. Comunicação síncrona ou assíncrona (Na maioria das vezes com filas. O importante é não perder requisições/mensagens, mesmo que o serviço esteja fora do ar)



4. Microserviços não são para todas as situações

4.1. Arquitetura é mais complexa 
4.2. Custo mais elevado (mais infra)
4.3. Necessidade de mais equipes para manter (squads)
4.4. Sistema precisa ser grande o suficiente para justificar o uso de ms
4.5. Gera problemas que normalmente não ocorriam
4.6. Monitoração complexa


"Microsserviços não são moda, mas sim necessidade."


-- Microservices: Principais características --
Fonte: Microservices by Martin Fowler - http://bit.ly/fowler-microservicos
https://martinfowler.com/articles/microservices.html

- Componentização via serviços
- Organização em torno do negócio
- Estrutura baseada em Produtos. Não em projetos.
- Smart endpoints & Dumb pipes
- Governança descentralizada
- Descentralização no Gerenciamento de dados
- Automação de infraestrutura
- Desenhado para Falhar
- Design evolutivo.





== 2. Orientação a Negócios ==
== 3. Outras Características ==

https://martinfowler.com/articles/microservices.html

0. Microservices: Principais características
0.1. Componentização via serviços
0.2. Organização em torno do negócio
0.3. Estrutura baseada em Produtos. Não em projetos.
0.4. Smart endpoints & Dumb pipes
0.5. Governança descentralizada
0.6. Descentralização no Gerenciamento de dados
0.7. Automação de infraestrutura
0.8. Desenhado para Falhar
0.9. Design evolutivo.



1. Componentização via serviços
1.1. Services dos microserviços != Services da O.O.
1.2. "Componente é uma unidade de software independente que pode ser substituída ou atualizada".
1.3. Desvantagens
1.3.1. Chamadas externas são mais custosas do que chamadas locais (custo de rede, hardware, configuração, banda, etc).
1.3.2. O cruzamento entre componentes pode se tornar complexo
1.3.3. As transações entre serviços são "grandes desafios"
1.3.4. Mudanças bruscas em regras de negócio podem afetar diversos serviços, tornando o processo difícil de ser refeito.


2. Organização em torno do negócio
2.1. Conceito importante
2.1.1. Um projeto é baseado em um ou mais produtos que trabalham em diferentes contextos
2.2. Time de desenvolvedores por produto
2.3. Muitas empresas tratam os times como "squads" (vide Netflix)
2.4. Cada squad é multidisciplinar
2.5. Cada squad é responsável por um ou mais produtos
2.6. Cada produto pode ter um ou mais serviços envolvidos


3. Estrutura baseada em Produtos. Não em projetos.


4. Smart endpoints & Dumb pipes
4.1. Exposição de APIs (ex.: REST)
4.2. Comunicação entre serviços
4.3. Comunicação síncrona e assíncrona
4.3.1. A API deve deixar o mais explícito possível o que está acontecendo, se a transação foi recebida, se será respondido posteriormente, etc.
4.4. Utilização de sistemas de mensageria (ex.: RabitMQ)
4.5. Garantia de que um serviço foi executado baseado na execução das filas


5. Governança descentralizada
5.1. Contribui para a escolha da ferramenta certa para o trabalho certo. Tecnologias podem ser definidas/baseadas na necessidade do produto
5.2. É possível ter diferentes padrões entre squads
5.2.1. Isso não significa que é pra se tornar a Casa da Mãe Joana. Deve-se ter coerência na escolha de tecnologias e padrões, para que o futuro do sistema não se torne refém de tecnologias que ninguém domina.
5.3. Contratos de interface de forma independente


6. Descentralização no Gerenciamento de Dados



7. Automação de infraestrutura
7.1. Uso do Cloud computing
7.2. Testes automatizados
7.3. Continuoius delivery
7.4. Continuous Integration
7.5. Load balancer / Autoscaling
7.5.1. Infra organizada para atender picos de demanda



8. Desenhado para Falhar
8.1. Ao projetar um ms, o pensamento básico deve ser: "Este microsserviço tem dependências, se ele cair o que acontecerá?".
8.2. Tolerância a falha
8.3. Serviços que se comunicam precisam de fallback
8.4. Logging
8.4.1. Tudo deve ser logado: subida do container, mensagens recebidas, warnings, erros, etc.
8.5. Monitoração em tempo real
8.5.1. O pior cenário é quando o cliente descobre que o seu serviço caiu antes de você ter percebido.
8.6. Alarmes



9. Design evolutivo.
9.1. Produtos bem definidos podem evoluir ou serem extintos por razões de negócio
9.2. Gerenciamento de versões
9.3. Replacement and upgradeability




== 4. Atividade ==


O que é uma infraestrutura on-premise?

( ) É uma infraestrutura nas nuvens que utiliza lambda functions
( ) É um formato de requisição utilizada normalmente pelo Javascript
( ) É o processo assíncrono de requisição que aguarda uma resposta
(x) É quando os servidores estão fisicamente localizados nas instalações das empresas

A grande característica do SOA é:

( ) Que cada serviço tenha seu próprio banco de dados
( ) A não utilização de um Enterprise Service Bus
( ) Sistemas totalmente distribuídos sem ponto de falha
(x) Utilização de um ESB

Quais são os frameworks mais conhecidos no mundo da arquitetura de software?

( ) Waterfall e Scrum
(x) ISO 42010 e TOGAF
( ) SCRUM e Kanban
( ) SCRUM e PMI
( ) PMI e TOGAF

Uma aplicação com escala horizontal normalmente possui:

( ) Armazenamento persistente
( ) Não trabalha com disco efêmero
(x) Cache centralizado
( ) Sessões descentralizadas

Uma característica notória de um sistema monolítico é:

( ) Deploy baseado em módulos
( ) Alta coesão
( ) Multilinguagem
(x) Alto acoplamento
( ) Baixa complexidade para times grandes


Qual dos itens abaixo não é considerado um pilar no mundo da arquitetura?

( ) Governança
( ) Componentização
( ) Ambiente
(x) Frameworks
( ) Cultura

Uma característica comum na arquitetura baseada em microserviços é:

(x) Maior tolerância a falha
( ) Serviços com alto acoplamento
( ) APENAS comunicação síncrona
( ) Bancos de dados compartilhados

Quem foi o "autor" que definiu as 9 características da arquitetura baseada em microserviços?

( ) Kent Beck
(x) Martin Fowler
( ) ISO
( ) Robert Martin (Uncle Bob)
( ) Sebastian Bergmann

A divisão dos microserviços devem ser realizadas baseado em:

( ) Desafios monolíticos
( ) Desafios de escala
(x) Problemas de negócio
( ) Desafios técnicos
( ) Desafios de integração entre sistemas

Podemos afirmar que um sistema monolítico é:

(x) É apenas outra abordagem no mundo da arquitetura de software
( ) São sistemas com baixo acoplamento e alta coesão
( ) Uma má prática no mundo da arquitetura de software
( ) Normalmente é extremamente complexo
( ) É muito raro ter uma aplicação que seja atendida por um sistema monolítico

Podemos afirmar que escala vertical é:

(x) É um processo que visa aumentar os recursos computacionais no ( ) o node para escalar
( ) Um processo que visa adicionar mais nodes para escalar 






== 5. API Gateway ==

"Uma API gateway recebe todas as chamadas de APIs dos clientes e então as roteia para os microsserviços correspondentes..." (nginx.com)

Em alguns casos a API Gateway também é responsável por realizar processos de verificação de segurança, como autenticação e autorização.

(*) Analogia: Como se fosse um Façade da O.O.
(*) Ver Amazon API Gateway





== 6. Service Discovery  ==

Quando o microsserviço possui diversas instâncias, para qual delas a API Gateway direcionará a requisição recebida?


"O processo de Service Discovery é responsável por prover mecanismos de identificação dos serviços disponíveis e suas instâncias"

(*) Analogia: Load Balancer


-- Client Side - Cenário 1 -- 

1. Client consulta um "Service Registry"
2. Client faz o acesso ao Serviço (Node)


-- Client Side - Cenário 2 -- 

1. Load Balancer consulta o Service Registry para obter informações dos nodes disponíveis
2. Quando necessário, o Client acessa o Load Balancer, que por sua vez faz a chamada ao node adequado.


(*) Sempre deve ter um "Service Registry"


-- ferramentas populares --

1. Netflix Eureka
2. Consul (*) Escolha do instrutor
3. Etcd
4. ZooKeeper






(*) Kubernetes faz o trabalho de Discovery automaticamente
